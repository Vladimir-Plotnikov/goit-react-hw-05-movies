{"version":3,"file":"static/js/219.b928341d.chunk.js","mappings":"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","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.js","components/Notification/Notification.js","services/movieApi.js"],"sourcesContent":["import styled from 'styled-components';\n\nconst List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 16px;\n  list-style-type: none;\n  li {\n    flex-basis: calc((100% - 7 * 16px) / 8);\n  }\n  img {\n    width: 140px;\n    height: 140px;\n    margin-bottom: 16px;\n    object-fit: cover;\n    border-radius: 10px;\n  }\n  p {\n    font-size: 12px;\n  }\n`;\n\nconst Character = styled.p`\n  margin-top: 4px;\n  color: #808080;\n`;\n\nexport { List, Character };","import { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { getMovieByCast } from \"services/movieApi\";\nimport { Notification } from \"components/Notification/Notification\";\nimport defaultPicture from '../../images/default-movie.jpeg'\nimport { Hearts } from \"react-loader-spinner\";\nimport { List, Character } from './Cast.styled';\n\nconst Status = {\n    IDLE: 'idle',\n    PENDING: 'pending',\n    REJECTED: 'rejected',\n    RESOLVED: 'resolved',\n}\n\nconst Cast = () => {\n    const { movieId } = useParams();\n    const [cast, setCast] = useState(null);\n    const [error, setError] = useState(null);\n    const [status, setStatus] = useState(Status.IDLE)\n    \n    useEffect(() => {\n        setStatus(Status.PENDING);\n        getMovieByCast(movieId)\n            .then(({ cast }) => {\n                if (!cast.length) {\n                    setError(\n                        'We are sorry, but we did not find any cast on this film'\n                    )\n                    setStatus(Status.REJECTED)\n                    return\n                }\n                setCast(cast)\n                setStatus(Status.RESOLVED)\n            })\n            .catch(error => {\n                setError(error)\n                setStatus(Status.REJECTED);\n            })\n    }, [movieId]);\n    \n    return (\n        <>\n            {status === Status.PENDING &&\n                <div>\n                    <Hearts\n                        height=\"300\"\n                        width=\"300\"\n                        color=\"#ec9706\"\n                        ariaLabel=\"hearts-loading\"\n                        wrapperStyle={{}}\n                        wrapperClass=\"\"\n                        visible={true}\n                    />\n                </div>}\n            {status === Status.REJECTED && <Notification message={error} />}\n            {status === Status.RESOLVED && (\n            \n                <List>\n                    {cast.map(({ id, character, name, profile_path }) => (\n                        <li key={id}>\n                            <img\n                                src={\n                                    profile_path\n                                        ? `https://image.tmdb.org/t/p/w500${profile_path}`\n                                        : defaultPicture\n                                }\n                                alt={name}\n                            />\n                            <p>{name}</p>\n                            <Character>Character: {character}</Character>\n                        </li>\n                    ))}\n                </List>\n            )}\n        </>\n    );\n};\n\nexport default Cast","export const Notification = ({ message }) => {\n    return <p>{message}</p>;\n};","const BASE_URL = 'https://api.themoviedb.org/3'\nconst API_KEY = 'ade6c0d166c517e1fe622025fc12c476'\n\nasync function getTrendingMovies() {\n    const response = await fetch(\n        `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`\n    );\n    if (response.ok) {\n        return await response.json()\n    }\n    return await Promise.reject(\n        new Error(\"Oops, something went wrong... We can't load trending movies :(\")\n    );\n}\n\nasync function getMovieById(id) {\n    const response = await fetch(\n        `${BASE_URL}/movie/${id}?api_key=${API_KEY}`\n    );\n    if (response.ok) {\n        return await response.json();\n    }\n    return await Promise.reject(\n        new Error('We are sorry, but we did not find any information about this movie')\n    )\n}\n\nasync function getMovieByCast(id) {\n    const response = await fetch(\n        `${BASE_URL}/movie/${id}/credits?api_key=${API_KEY}`\n    )\n    if (response.ok) {\n        return await response.json()\n    }\n    return await Promise.reject(\n        new Error('We are sorry, but we did not fint any information about this movie by cast')\n    )\n};\n\nasync function getMovieByReviews(id) {\n    const response = await fetch(\n        `${BASE_URL}/movie/${id}/reviews?api_key=${API_KEY}`\n    )\n    if (response.ok) {\n        return await response.json()\n    }\n    return Promise.reject(\n        new Error('We dont have any reviews for this movie')\n    )\n}\n\nasync function getMovieByQuery(query) {\n    const response = await fetch(\n        `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${query}`\n    );\n    if (response.ok) {\n        return await response.json();\n    }\n    return await Promise.reject(\n        new Error(`No results containing ${query} were found`)\n    );\n}\n\nexport {\n    getTrendingMovies,\n    getMovieByCast,\n    getMovieById,\n    getMovieByQuery,\n    getMovieByReviews,\n}"],"names":["List","styled","Character","Status","movieId","useParams","useState","cast","setCast","error","setError","status","setStatus","useEffect","getMovieByCast","then","length","catch","height","width","color","ariaLabel","wrapperStyle","wrapperClass","visible","Notification","message","map","id","character","name","profile_path","src","defaultPicture","alt","BASE_URL","API_KEY","getTrendingMovies","fetch","response","ok","json","Promise","reject","Error","getMovieById","getMovieByReviews","getMovieByQuery","query"],"sourceRoot":""}