{"version":3,"file":"static/js/347.b258094c.chunk.js","mappings":"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","sources":["components/Notification/Notification.js","pages/MoviesDetails/MoviesDetails.styled.js","pages/MoviesDetails/MoviesDetails.js","services/movieApi.js"],"sourcesContent":["export const Notification = ({ message }) => {\n    return <p>{message}</p>;\n};","import { NavLink } from 'react-router-dom';\nimport styled from 'styled-components';\n\nconst Section = styled.section`\n  padding-top: 24px;\n  padding-bottom: 24px;\n`;\n\nconst Container = styled.div`\n  padding-left: 20px;\n  padding-right: 20px;\n  margin-left: auto;\n  margin-right: auto;\n  width: 1280px;\n`;\n\nconst MovieWrapper = styled.div`\n  display: flex;\n  gap: 32px;\n  margin-top: 24px;\n  margin-bottom: 24px;\n  img {\n    width: 268px;\n  }\n  p {\n    margin-bottom: 16px;\n  }\n`;\n\nconst Title = styled.h1`\n  margin-bottom: 36px;\n  font-size: 42px;\n`;\nconst GenreWrapper = styled.p`\n  display: flex;\n  gap: 12px;\n`;\n\nconst Genre = styled.span`\n  padding: 4px 12px;\n  font-size: 16px;\n  line-height: 1.4;\n  border: 1px solid #ec9706;\n  border-radius: 25px;\n`;\n\nconst AdditionalInfo = styled.div`\n  margin-bottom: 24px;\n  h2 {\n    margin-bottom: 24px;\n    font-size: 36px;\n  }\n  ul {\n    display: flex;\n    gap: 16px;\n  }\n`;\n\nconst NavItem = styled(NavLink)`\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  text-transform: capitalize;\n  transition: color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  &.active {\n    color: #ec9706;\n  }\n  &:hover:not(.active),\n  &:focus-visible:not(.active) {\n    color: #ec9706;\n  }\n`;\n\nexport {\n  Section,\n  Container,\n  MovieWrapper,\n  Title,\n  GenreWrapper,\n  Genre,\n  AdditionalInfo,\n  NavItem,\n};","import { Suspense, useEffect, useState } from \"react\";\nimport { Outlet, useLocation, useParams } from \"react-router-dom\";\nimport { getMovieById } from \"services/movieApi\";\nimport defaultPicture from '../../images/default-movie.jpeg'\nimport { Notification } from \"components/Notification/Notification\";\nimport { Hearts } from \"react-loader-spinner\";\nimport {\n    AdditionalInfo,\n    Container,\n    Genre,\n    GenreWrapper,\n    MovieWrapper,\n    NavItem,\n    Section,\n    Title\n} from \"./MoviesDetails.styled\";\n\nconst Status = {\n    IDLE: 'idle',\n    PENDING: 'pending',\n    REJECTED: 'rejected',\n    RESOLVED: 'resolved',\n}\n\nconst MoviesDelails = () => {\n    const {movieId} = useParams();\n    const [movie, setMovie] = useState(null);\n    const [error, setError] = useState(null);\n    const [status, setStatus] = useState(Status.IDLE)\n    const location = useLocation();\n\n    useEffect(() => {\n        setStatus(Status.PENDING)\n        getMovieById(movieId).then(movieInfo => {\n            if (!Object.keys(movieInfo).length) {\n                setError(\n                    'We are sorry, we cant find any information about this movie'\n                );\n                setStatus(Status.REJECTED);\n                return\n            }\n            setMovie(movieInfo)\n            setStatus(Status.RESOLVED)\n        }).catch(error => {\n            setError(error);\n            setStatus(Status.REJECTED)\n        })\n    }, [movieId]);\n\n    const backLinkHref = location.state?.from ?? '/'\n    \n\n    return (\n        <main>\n            <Section>\n                <Container>\n                    <NavItem to={backLinkHref}>\n                        <span>Go back</span>\n                    </NavItem>\n                    {status === Status.PENDING &&\n                        <div>\n                            <Hearts\n                                height=\"300\"\n                                width=\"300\"\n                                color=\"#ec9706\"\n                                ariaLabel=\"hearts-loading\"\n                                wrapperStyle={{}}\n                                wrapperClass=\"\"\n                                visible={true}\n                            />\n                        </div>}\n                    {status === Status.REJECTED && <Notification message={error} />}\n                    {status === Status.RESOLVED && (\n                        <>\n                            <MovieWrapper>\n                                <img\n                                    src={\n                                        movie.poster_path\n                                            ? `https://image.tmdb.org/t/p/w500${movie.poster_path}`\n                                            : defaultPicture\n                                    }\n                                    alt={movie.title}\n                                />\n                                <div>\n                                    <Title>\n                                        {movie.title}({new Date(movie.release_date).getFullYear()})\n                                    </Title>\n                                    <p>User Score: {Math.round(movie.vote_average * 10)}%</p>\n                                    <p>\n                                        <b>Overview</b>\n                                    </p>\n                                    <p>{movie.overview}</p>\n                                    <p>\n                                        <b>Genres</b>\n                                    </p>\n                                    <GenreWrapper>\n                                        {movie.genres.map(({ name }) => (\n                                            <Genre key={name}>{name}</Genre>\n                                        ))}\n                                    </GenreWrapper>\n                                </div>\n                            </MovieWrapper>\n                            <AdditionalInfo>\n                                <h2>\n                                    Additional information\n                                </h2>\n                                <ul>\n                                    <li>\n                                        <NavItem to=\"cast\" state={{ from: backLinkHref }}>\n                                            <span>Cast</span>\n                                        </NavItem>\n                                    </li>\n                                    <li>\n                                        <NavItem to=\"reviews\" state={{ from: backLinkHref }}>\n                                            <span>Reviews</span>\n                                        </NavItem>\n                                    </li>\n                                </ul>\n                            </AdditionalInfo>\n                            <Suspense fallback={null}>\n                                <Outlet />\n                            </Suspense>\n                        </>\n                    )}\n                </Container>\n            </Section>\n        </main>\n    )\n};\n\nexport default MoviesDelails\n\n","const BASE_URL = 'https://api.themoviedb.org/3'\nconst API_KEY = 'ade6c0d166c517e1fe622025fc12c476'\n\nasync function getTrendingMovies() {\n    const response = await fetch(\n        `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`\n    );\n    if (response.ok) {\n        return await response.json()\n    }\n    return await Promise.reject(\n        new Error(\"Oops, something went wrong... We can't load trending movies :(\")\n    );\n}\n\nasync function getMovieById(id) {\n    const response = await fetch(\n        `${BASE_URL}/movie/${id}?api_key=${API_KEY}`\n    );\n    if (response.ok) {\n        return await response.json();\n    }\n    return await Promise.reject(\n        new Error('We are sorry, but we did not find any information about this movie')\n    )\n}\n\nasync function getMovieByCast(id) {\n    const response = await fetch(\n        `${BASE_URL}/movie/${id}/credits?api_key=${API_KEY}`\n    )\n    if (response.ok) {\n        return await response.json()\n    }\n    return await Promise.reject(\n        new Error('We are sorry, but we did not fint any information about this movie by cast')\n    )\n};\n\nasync function getMovieByReviews(id) {\n    const response = await fetch(\n        `${BASE_URL}/movie/${id}/reviews?api_key=${API_KEY}`\n    )\n    if (response.ok) {\n        return await response.json()\n    }\n    return Promise.reject(\n        new Error('We dont have any reviews for this movie')\n    )\n}\n\nasync function getMovieByQuery(query) {\n    const response = await fetch(\n        `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${query}`\n    );\n    if (response.ok) {\n        return await response.json();\n    }\n    return await Promise.reject(\n        new Error(`No results containing ${query} were found`)\n    );\n}\n\nexport {\n    getTrendingMovies,\n    getMovieByCast,\n    getMovieById,\n    getMovieByQuery,\n    getMovieByReviews,\n}"],"names":["Notification","message","Section","styled","Container","MovieWrapper","Title","GenreWrapper","Genre","AdditionalInfo","NavItem","NavLink","Status","movieId","useParams","useState","movie","setMovie","error","setError","status","setStatus","location","useLocation","useEffect","getMovieById","then","movieInfo","Object","keys","length","catch","backLinkHref","state","from","to","height","width","color","ariaLabel","wrapperStyle","wrapperClass","visible","src","poster_path","defaultPicture","alt","title","Date","release_date","getFullYear","Math","round","vote_average","overview","genres","map","name","Suspense","fallback","BASE_URL","API_KEY","getTrendingMovies","fetch","response","ok","json","Promise","reject","Error","id","getMovieByCast","getMovieByReviews","getMovieByQuery","query"],"sourceRoot":""}